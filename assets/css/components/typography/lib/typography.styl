/* @define Typography */

/* DCGY variables */

/* blacks */
$dcgy-color-black ?= #000000

$dcgy-color-black-opacity-primary ?= 0.67 // 0.87
$dcgy-color-black-opacity-secondary ?= 0.42 //0.54
$dcgy-color-black-opacity-hint ?= 0.30 //0.38
$dcgy-color-black-opacity-disabled ?= $dcgy-color-black-opacity-hint
$dcgy-color-black-opacity-divider ?= 0.10 //0.12

$dcgy-color-black-primary ?= rgba(0, 0, 0, $dcgy-color-black-opacity-primary);
$dcgy-color-black-secondary ?= rgba(0, 0, 0, $dcgy-color-black-opacity-secondary);
$dcgy-color-black-hint  ?= rgba(0, 0, 0, $dcgy-color-black-opacity-hint);
$dcgy-color-black-disabled ?= $dcgy-color-black-hint
$dcgy-color-black-divider ?= rgba(0, 0, 0, $dcgy-color-black-opacity-divider);

$dcgy-color-black-primary-hex ?= #545454
$dcgy-color-black-secondary-hex ?= #949494
$dcgy-color-black-hint-hex ?= #B2B2B2
$dcgy-color-black-disabled-hex ?= $dcgy-color-black-hint-hex
$dcgy-color-black-divider-hex ?= #E5E5E5

/* whites */
$dcgy-color-white = #FFFFFF

$dcgy-color-white-opacity-primary = 1
$dcgy-color-white-opacity-secondary = 0.7
$dcgy-color-black-opacity-hint = 0.5
$dcgy-color-black-opacity-disabled = $type-opacity-hint
$dcgy-color-black-opacity-divider = 0.12

$dcgy-color-white-primary ?= rgba(255, 255, 255, $dcgy-color-white-opacity-primary);
$dcgy-color-white-secondary ?= rgba(255, 255, 255, $dcgy-color-white-opacity-secondary);
$dcgy-color-white-hint ?= rgba(255, 255, 255, $dcgy-color-black-opacity-hint);
$dcgy-color-white-disabled ?= $dcgy-color-white-hint
$dcgy-color-white-divider ?= rgba(255, 255, 255, $dcgy-color-black-opacity-divider);


/* system fonts */
$system-fonts = -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;

/* Custom font stacks */
$roboto-subset = Roboto-subset, $system-fonts;
$roboto = Roboto, $system-fonts;
$roboto-light = Roboto-Light, $system-fonts;
$roboto-medium = Roboto-Medium, $system-fonts;

/* Typography variables mapping*/

/* base */
$type-base-font-size = 100%; //16px
$type-line-height-ratio = 1.5; //line-height-ratio = 1.5
//$heading-ratio = $golden
$type-target-elements = true;

/* body */
$type-body-font-subset = $roboto-subset;
$type-body-font = $roboto; // $body-font = $roboto, $system-fonts
$type-body-font-weight = normal; //400
$type-body-color = $dcgy-color-black-primary-hex; // $body-color = #212121 //#666

/* links */
/* @extends body */
$type-link-font = $roboto-medium;
$type-link-font-weight = 500;
$type-link-color = #3CC76A;

/* headings */
$type-heading-font = $roboto; // $heading-font = $helvetica
$type-heading-font-weight = normal; //400
$type-heading-color = $dcgy-color-black-secondary-hex; // $heading-color = #111

/* titles */
/* Medium font weight as opposed to regular heading-font-weigts */
$type-title-font = $roboto-medium; // $heading-font = $helvetica
$type-title-font-weight = 500;
$type-title-color = $dcgy-color-black-primary-hex; // $heading-color = #111

/* menus & links */
$type-menu-font = $roboto-medium
$type-menu-font-weight = 500;
type-menu-color = $dcgy-color-black-primary-hex;


/*light touch */
$type-light-font = $roboto-light;
$type-light-font-weight = 300;
$type-light-color = $dcgy-color-black-primary-hex;


/* Helpers */

/* Grid overlay */
/**
 * Creates a baseline grid based off your $type-line-height-ratio to help visualize
 * your vertical rhythm grid. You can offset the grid by negative or positive
 * pixels to line it up perfectly with the bottom of your text.
 *
 * @param {color} [$color=black] - A color to be lightened and used as the color for the grid.
 * @param {number} [$px-offset=false] - A positive or negative number of pixels
 * to offset the grid by. Useful for lining the bottom of the gridlines up with your text.
 *
 * @example
 *   grid-overlay(blue, 2)
 */
type-grid-overlay($ratio = $type-line-height-ratio, $color = black, $px-offset = false)
  body
    background: linear-gradient(to top, rgba($color, 10%) 5%, white 5%)
    background-size: 100% ($ratio )em
    if $px-offset
      background-position: 0 unit($px-offset, 'px')

/* Type vertical rythm block */
/**
 * Returns a "vertical unit". Useful for specifying the height and margins of
 * non-text elements like images and such.
 *
 * @param {number} [$units=1] - Number of units. Accepts floated numbers as well.
 * @param {number} [$px-offset=false] - A positive or negative number of pixels
 * to offset the grid by. Useful for lining the bottom of the gridlines up with
 * your text. Since this doesn't compute a literal pixel you may need to use a
 * floated number (multiples of .25 work well) to keep your rhythm on track.
 *
 * @example
 *   img
 *     padding-top type-vr-block(5.25, .5)
 */
type-vr-block($units = 1, $px-offset = false)
  if $px-offset
    return ( (($type-line-height-ratio * $type-base-font-size) / ($type-base-font-size / 2)) * ($units / 2) * (1 + ($px-offset / $type-base-font-size)) )em
  else
    return ( (($type-line-height-ratio * $type-base-font-size) / ($type-base-font-size / 2)) * ($units / 2) )em

/* base-spaceing-units calculator */
/**
 * returns multiples of the bases pacing unit of 8px or 0.5rem in rem or pixel.
 *
 * @param {number} [$blocks=1] - Number of blocks to multiply with the base spacing unit.
 * @param {string} [$unit='inrem'] - return the multiple in rem ('inrem') or in pixel ('inpx')
 *
 * @example
 *    img
 *      margin-bottom: type-bsu(4, 'inpx')
 */
type-bsu($blocks = 1, $unit = 'inrem')
  if $unit == 'inrem'
    return ($blocks * 0.5)rem
  if $unit == 'inpx'
    return ($blocks * 8)px

/* rem converter */
/**
 *  converts relative or absolute unit to rem
 *
 * @param {value} [x] - Value to convert into rem. Accepts values in px, %, pt
 * @param {fontsize} [context=100%] - Context fontsize to run the conversion
 * against. Defaults to '100%' Accepts '%' and 'px'.
 * TODO: accept em, rem, and pt as context
 *
 * @example
 *    img
 *      margin-bottom: rem(12px, context: 14px)
 */
rem(x, context = 100%)
  if unit(context) == 'px'
    context = unit((100 * unit(context, '') / 16), '%')
  if unit(x) is 'px'
    unit(x / (context * 4/25), 'rem');
  else if unit(x) is '%'
    unit(x / context, 'rem');
  else if unit(x) is 'pt'
    unit(x / (context * 4/25), 'rem');

/* em converter */
/**
 *  converts relative or absolute unit to em
 *
 * @param {value} [x] - Value to convert into em. Accepts values in px, %, pt
 * @param {fontsize} [context=100%] - Context fontsize to run the conversion
 * against. Defaults to '100%' Accepts '%', 'px' and 'rem'.
 * TODO: accept em and pt as context
 *
 * @example
 *    img
 *      margin-bottom: em(56px, context: @font-size)
 */
em(x, context=100%)
  if unit(context) == 'px'
    context = unit((100 * unit(context, '') / 16), '%')
  if unit(context) == 'rem'
    context = unit((100 * unit(context, '') / 1), '%')
  if unit(x) is 'px'
    unit(x / (context * 4/25), 'em');
  else if unit(x) is '%'
    unit(x / context, 'em');
  else if unit(x) is 'pt'
    unit(x / (context * 4/25), 'em');

/* Typography Mixins */

type-reset()
  margin: 0
  padding: 0

type-block()
  // NOTE OLD: margin-bottom: ($type-line-height-ratio)em; // 1.5em
  margin-bottom: 24px;
  margin-bottom: ($type-line-height-ratio)rem; // 1.5rem

apply-font($font = $system-fonts, $weight = false, $style = false)
  if $font
    font-family: $font
  if $weight
    font-weight: $weight;
  if $style
    font-style: $style

type-html($color = $type-body-color, $opacity = false)
  apply-font($system-fonts)// ($roboto-subset)
  color: $color
  font-size: $type-base-font-size // 100% === 16px
  line-height: ($type-line-height-ratio) // 1,5 = 24px base line height

  if $opacity
    opacity: $opacity; // 0.87

type-body = type-html
type-p = type-html

type-display($color = false, $weight = $type-heading-font-weight, $opacity = false)
  // apply font not needed here by default
  clear: both
  if $color
    color: $color;
  if $weight
    font-weight: $weight;
  if $opacity
    opacity: $opacity; // 0.54


type-display4()
  font-size: 112px;
  font-size: 7rem;
  /* overwrite settings via type-display */
  font-weight: $type-light-font-weight; //300
  letter-spacing: -0.04em;
  line-height: 1;

type-display3()
  font-size: 56px;
  font-size: 3.5rem;
  letter-spacing: -0.02em;
  line-height: (72 / 56);

type-display2()
  font-size: 45px;
  font-size: 2.8125rem;
  line-height: (48 / 45);

type-display1()
  font-size: 34px;
  font-size: 2.125rem;
  line-height: (40 / 34);

type-headline()
  -moz-osx-font-smoothing: grayscale;
  font-size: 24px;
  font-size: 1.5rem;
  line-height: (32 / 24);

type-title()
  font-size: 20px;
  font-size: 1.25rem;
  font-weight: $type-title-font-weight; // 500
  letter-spacing: 0.02em;
  line-height: 1;

type-subhead2()
  font-size: 16px;
  font-size: 1rem;
  letter-spacing: 0.04em;
  line-height: (28 / 16);

type-subhead1()
  font-size: 16px;
  font-size: 1rem;
  letter-spacing: 0.04em;
  line-height: (24 / 16);

type-body2()
  font-size: 14px;
  font-size: 0.875rem;
  letter-spacing: 0;
  line-height: (24 / 14);

type-body1()
  font-size: 14px;
  font-size: 0.875rem; // 14px
  letter-spacing: 0;
  line-height: (20 / 14)// 1.25rem // 20px

type-menu()
  font-size: 14px;
  font-size: rem(14px)// 14px
  font-weight: $type-menu-font-weight; // 500
  letter-spacing: 0;
  line-height: 1;

type-button()
  type-menu()
  //cursor: pointer
  display: block
  margin: em(6px, context: @font-size);
  margin: rem(6px);
  padding: em(11px, context: @font-size);
  padding: rem(11px);
  text-transform: uppercase;

type-caption()
  font-size: 12px;
  font-size: 0.75rem
  letter-spacing: 0;
  line-height: 1;

type-blockquote()
  font-size: 1.5rem; // 24px
  font-style: italic;
  font-weight: $type-light-font-weight; // 300
  line-height: (32 / 24); // 2rem //32px
  letter-spacing: 0.08em;
  margin-bottom: 1em;
  position: relative;
  &:before
    position: absolute;
    left: -0.5em;
    content: '“';
  &:after
    content: '”';
    margin-left: -0.05em;

  //cite
    //display: block;
    //font-style: normal;

type-pre()
  padding: type-vr-block(.5) // 12px
  margin-bottom: type-vr-block(1) // 24px
  code
    padding: 0

type-code()
  // https://www.sitepoint.com/eight-definitive-font-stacks-2/
  font-family: Consolas, "Andale Mono WT", "Andale Mono", "Lucida Console", "Lucida Sans Typewriter", "DejaVu Sans Mono", "Bitstream Vera Sans Mono", "Liberation Mono", "Nimbus Mono L", Monaco, "Courier New", Courier, monospace, monospace;
  padding: ($type-line-height-ratio * .05)em ($type-line-height-ratio * .15)em;
  line-height: 0;

type-abbr()
  border-bottom: 1px dotted currentColor
  cursor: help
  text-decoration: none;

type-dt()
  font-weight: $type-title-font-weight; // 500

type-fieldset()
  padding: type-vr-block(.5) type-vr-block() type-vr-block(); // 0.75em 1.5em 1.5em;
  border: 1px solid $dcgy-color-black-divider-hex;
  max-width: 100%;
  margin-bottom: type-vr-block((4/3)); // 1.5em

  /* button, input[type='submit']
    // margin-bottom: 0; */

type-legend()
  //color: $type-heading-color
  font-weight: $type-title-font-weight; // 500

type-label()
  display: block
  padding-bottom: type-vr-block((1/6))
  margin-bottom: type-vr-block(-(1/6))

type-input()
  display: block;
  max-width: 100%;
  padding: type-vr-block(1/6)
  //font-size: 1rem; // 16px
  margin-bottom: type-vr-block((2/3)) //16px

type-table()
  width: 100%;
  border-spacing: 0;
  border-collapse: collapse;
  margin-bottom: type-vr-block((4/3)) // 16px

type-th()
  //color: $type-heading-color;
  font-weight: $type-title-font-weight; // 500
  text-align: left

  padding: type-vr-block((1/3)) type-vr-block(0.5); // 4px 8px

type-td()
  padding: type-vr-block((1/3)) type-vr-block(0.5); // 4px 8px

// type-icon()
//   font-family: 'Material Icons';
//   font-weight: normal;
//   font-style: normal;
//   font-size: 24px;
//   line-height: 1;
//   letter-spacing: normal;
//   text-transform: none;
//   display: inline-block;
//   word-wrap: normal;
//   font-feature-settings: 'liga';
//   -webkit-font-smoothing: antialiased;

/* Typographic reset */
/**
 * The Typographic Reset. This is where the Typeography module goes through
 * every markup element and styles it.
 *
 * @example
 *   type-styleElements()
 */
//$type-target-elements = false
if $type-target-elements
  typography()

    html
      type-html()
    html.fonts-stage1
      font-family: $type-body-font-subset
    html.fonts-loaded
      font-family: $type-body-font

    h1, h2, h3, h4, h5, h6, p, blockquote, pre,
    a, abbr, acronym, address, big, cite, code,
    del, dfn, em, img, ins, kbd, q, s, samp,
    small, strike, strong, sub, sup, tt, var,
    b, u, i, center,
    dl, dt, dd, ol, ul, li,
    fieldset, form, label, legend,
    table, caption, tbody, tfoot, thead, tr, th, td
      type-reset()

    a
      color: $type-link-color;
      font-weight: $type-link-font-weight; // 500
    .fonts-loaded a
      font-family: $type-link-font

    p, blockquote, pre,
    address,
    dl, ol, ul,
    table
      type-block()

    //p:last-of-type
      //margin-bottom: 0;

    h1, h2, h3, h4, h5 ,h6
      type-display($weight: $type-heading-font-weight)
      margin-bottom: 24px
      margin-bottom: 1.5rem

    h1
      // //type-display3() // avoid letter-spacing
      font-size: 56px;
      font-size: 3.5rem;
      line-height: (72 / 56);

    h2
      type-display2()

    h3
      type-display1()

    h4
      type-headline()

    h5
      // //type-title() // avoid letter-spacing
      font-size: 20px;
      font-size: 1.25rem;
      font-weight: $type-title-font-weight; // 500
      line-height: unit(em(24px, @font-size), ''); // Note: bumped linehight to 24px from 1

    h6
      // //type-subhead1() // avoid letter-spacing
      font-size: 16px;
      font-size: 1rem;
      font-weight: $type-title-font-weight; // 500
      line-height: (24 / 16);

    .fonts-loaded h5,
    .fonts-loaded h6
      font-family: $type-title-font;

    mark
      background-color: #f4ff81;

    address {
      type-caption();
      font-style: normal;
    }

    blockquote
      type-blockquote()
    .fonts-loaded blockquote
      font-family: $type-light-font; //TODO: $robto-LightItaic

    pre
      type-pre()

    code
      type-code()

    big, small, sub, sup
      line-height: 0

    abbr, acronym
      &[title]
        type-abbr()

    dt
      type-dt()
    .fonts-loaded dt
      font-family: $type-title-font;

    // ul
    //   padding-left: 1.1em
    //   list-style: disc;

    // ol
    //   padding-left: 1.4em
    //   list-style: decimal;

    fieldset
      type-fieldset();

    legend
      type-legend();
    .fonts-loaded legend
      font-family: $type-title-font

    label
      type-label()

    input[type="text"], input[type="email"], input[type="password"], textarea
      type-input()

    input[type="submit"], button
      type-button()

    table
      type-table()

    th
      type-th()
    .fonts-loaded th
      font-family: $type-title-font;


    td
      type-td()

/* Typography class definitions */

.Type {
  /* no styles on component base class*/
  //background-color: #eaf2ff;
}

.Type--display4,
.Type--display3,
.Type--display2,
.Type--display1,
//type-display($color: $type-heading-color, $weight: $type-heading-font-weight, $opacity: false);
.Type--headline,
.Type--title
  type-display($color: false, $weight: $type-heading-font-weight, $opacity: false)

.Type--display4
  type-display4()
.fonts-loaded .Type--display4
  font-family: $type-light-font

.Type--display3
  type-display3()

.Type--display2
  type-display2()

.Type--display1
  type-display1()

.Type--headline
  type-headline()

.Type--title
  type-title()
.fonts-loaded .Type--title
  font-family: $type-title-font;

.Type--subhead2
  type-subhead2()

.Type--subhead1
  type-subhead1()

.Type--body2
  type-body2()

.Type--body1
  type-body1()

.Type--menu
  type-menu()
.fonts-loaded .Type--menu
  font-family: $type-menu-font;

.Type--caption
  type-caption()

if $type-target-elements
  typography()
  //type-grid-overlay(($type-line-height-ratio / 3))
